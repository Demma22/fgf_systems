name: Build and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
      EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Set DATABASE_URL for Django Tests
        run: echo "DATABASE_URL=${DATABASE_URL}" >> $GITHUB_ENV

      - name: Set Email Environment Variables
        run: |
          echo "EMAIL_HOST_USER=${EMAIL_HOST_USER}" >> $GITHUB_ENV
          echo "EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}" >> $GITHUB_ENV

      - name: Set DJANGO_SECRET_KEY for Django Tests
        run: echo "DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}" >> $GITHUB_ENV

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ${{ github.workspace }}/requirements.txt

      - name: Run Tests
        run: python manage.py test

  deploy:
    runs-on: ubuntu-latest
    needs: [build_and_test]
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
      EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}

    steps:
      - name: Set DATABASE_URL for Deployment
        run: echo "DATABASE_URL=${DATABASE_URL}" >> $GITHUB_ENV

      - name: Set Email Environment Variables for Deployment
        run: |
          echo "EMAIL_HOST_USER=${EMAIL_HOST_USER}" >> $GITHUB_ENV
          echo "EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}" >> $GITHUB_ENV

      - name: Set DJANGO_SECRET_KEY for Deployment
        run: echo "DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}" >> $GITHUB_ENV

      - name: Deploy to Render
        run: |
          curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer ${{ secrets.RENDER_TOKEN }}" -d '{"branch": "main"}' https://api.render.com/v1/deploys

      - name: Wait for Render Deployment
        run: |
          RENDER_SERVICE_NAME="fgfbackend"  # Replace with your Render service name
          RENDER_ENVIRONMENT="production"  # Change to the appropriate environment

          STATUS=""
          while [ "$STATUS" != "SUCCEEDED" ] && [ "$STATUS" != "FAILED" ]; do
              STATUS=$(curl -s -H "Authorization: Bearer ${{ secrets.RENDER_TOKEN }}" https://api.render.com/v1/services/$RENDER_SERVICE_NAME/deploys/latest | jq -r .status)
              echo "Render deployment status: $STATUS"
              sleep 10
          done

          if [ "$STATUS" == "SUCCEEDED" ]; then
              echo "Render deployment successful!"
          else
              echo "Render deployment failed!"
              exit 1
          fi

      - name: Echo Deployment Status
        run: echo "Deployment to Render Completed"
